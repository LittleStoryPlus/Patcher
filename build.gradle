//file:noinspection GroovyAssignabilityCheck
plugins {
    id("org.jetbrains.kotlin.jvm")
    id("dev.architectury.loom")
    id("dev.architectury.architectury-pack200")
    id("com.replaymod.preprocess")
    id("maven-publish")
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
    maven { url "https://repo.sk1er.club/repository/maven-public" }
    maven { url 'https://repo.spongepowered.org/repository/maven-public/' }
}

mcVersion = project.ext.mcVersion
def mcVersionStr = "${(int) (mcVersion / 10000)}.${(int) (mcVersion / 100) % 100}" + (mcVersion % 100 == 0 ? '' : ".${mcVersion % 100}")
def accessTransformerName = mcVersion >= 11202 ? 'patcher112_at.cfg' : 'patcher18_at.cfg'

preprocess {
    vars.put("MC", mcVersion)
}

version = this.properties.getOrDefault("BUILD_ID", "LOCAL")
group = modGroup
archivesBaseName = modBaseName

kotlin.jvmToolchain {
    languageVersion = JavaLanguageVersion.of(8)
}

loom {
    launchConfigs {
        client {
            property("fml.coreMods.load", "club.sk1er.patcher.tweaker.PatcherTweaker")
            property("patcher.debugBytecode", "true")
            property("mixin.debug.verbose", "true")
            property("mixin.debug.export", "true")
            property("mixin.dumpTargetOnFailure", "true")
            arg("--tweakClass", "gg.essential.loader.stage0.EssentialSetupTweaker")
            arg("--mixin", "patcher.mixins.json")
        }
    }
    runConfigs {
        client {
            ideConfigGenerated = true
        }
    }
    forge {
        pack200Provider = new dev.architectury.pack200.java.Pack200Adapter()
        accessTransformer(project.parent.file("src/main/resources/$accessTransformerName"))
        mixinConfig("patcher.mixins.json")
    }
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

dependencies {
    minecraft("com.mojang:minecraft:$minecraftVersion")
    mappings("de.oceanlabs.mcp:$mappingsVersion")
    forge("net.minecraftforge:forge:$forgeVersion")

    def kotlin_version = "1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version") {
        exclude module: "kotlin-stdlib"
    }

    embed "gg.essential:loader-launchwrapper:1.1.3"
    implementation "gg.essential:essential-${mcVersionStr}-forge:1725"

    embed("com.github.Sk1erLLC:HookInjection:b9ac92c31e") {
        exclude module: "koffee"
        exclude module: "kotlin-reflect"
        exclude module: "kotlin-stdlib-jdk8"
        exclude module: "asm-debug-all"
    }

    implementation('com.github.half-cambodian-hacker-man:Koffee:d8cee73') {
        exclude module: 'asm-commons'
        exclude module: 'asm-tree'
        exclude module: 'asm'
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.4-SNAPSHOT'
    compileOnly 'org.spongepowered:mixin:0.8.4-SNAPSHOT'

    // Mixin needs these (and depends on them but for some reason that's not enough. FG, did you do that?)
    annotationProcessor 'com.google.code.gson:gson:2.2.4'
    annotationProcessor 'com.google.guava:guava:21.0'
    annotationProcessor 'org.ow2.asm:asm-tree:6.2'
    annotationProcessor 'org.apache.logging.log4j:log4j-core:2.0-beta9'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraftVersion
    // replace stuff in mcmod.info, nothing else
    filesMatching("mcmod.info") {
        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraftVersion
    }

    exclude "META-INF/**"
    copy {
        from("src/main/resources")
        into("build/classes/main")
    }

    rename '(.+_at.cfg)', 'META-INF/$1'
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

jar {
    dependsOn configurations.embed
    from(configurations.embed.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'club.sk1er.vigilance.example.ExampleMod', 'dummyThing'
        def i = 0
        filesMatching("META-INF/NOTICE*") { name = "$name.${i++}" }
        filesMatching("META-INF/LICENSE*") { name = "$name.${i++}" }
        filesMatching("META-INF/mods.toml") { name = "$name.${i++}" }
        filesMatching("LICENSE*") { name = "$name.${i++}" }
    }

    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
    manifest {
        attributes 'FMLCorePlugin': 'club.sk1er.patcher.tweaker.PatcherTweaker',
                'ModSide': 'CLIENT',
                'FMLAT': accessTransformerName,
                'FMLCorePluginContainsFMLMod': 'Yes, yes it does',
                'Main-Class': 'club.sk1er.container.ContainerMessage',
                'TweakClass': 'gg.essential.loader.stage0.EssentialSetupTweaker',
                'TweakOrder': '0',
                'MixinConfigs': 'patcher.mixins.json'
    }
}

compileKotlin {
    kotlinOptions {
        freeCompilerArgs += ['-Xopt-in=kotlin.RequiresOptIn', '-Xno-param-assertions']
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "Patcher"
            def mcVersion
            def (major, minor, patch) = project.name.tokenize('-')[0].tokenize('.')
            mcVersion = "${major}${minor.padLeft(2, '0')}${(patch ?: '').padLeft(2, '0')}" as int
            version = "${this.properties.getOrDefault("branch", "master") != "master" ? this.properties.getOrDefault("branch", "master") + "-" : ""}${project.version}-$mcVersion${this.properties.getOrDefault("IS_CI", false) ? "-SNAPSHOT" : ""}"

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                configurations.implementation.allDependencies.each {
                    if (it.group != null && it.name != null && it.name != "forge" && it.version != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }

            artifact jar
        }
    }

    repositories {
        if (project.hasProperty("nexus_user") && project.hasProperty("nexus_password")) {
            maven {
                name 'nexus'
                url "https://repo.sk1er.club/repository/maven-private-${this.properties.getOrDefault("IS_CI", false) ? "snapshots" : "releases"}/"

                credentials {
                    username project.nexus_user
                    password project.nexus_password
                }
            }
        }
    }
}
